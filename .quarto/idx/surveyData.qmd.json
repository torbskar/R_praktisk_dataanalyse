{"title":"Håndtering av data med innebygd metadata","markdown":{"headingText":"Håndtering av data med innebygd metadata","containsRefs":false,"markdown":"\n\nI dette kapittelet skal vi bruke følgende pakker:\n\n```{r }\n#| warning: false\n#| message: false\nlibrary(haven)       # Importere data fra SAS, SPSS og Stata\nlibrary(tidyverse)   # Pakker for generell datahåndtering og grafikk\nlibrary(labelled)    # Håndtering av variable med labler, importert fra annen software\nlibrary(forcats)     # Lettere omkoding av faktorvariable\n\n\n\n```\n\n\n## Intro: Dataformater \nDet kan være ulike problemstillinger knyttet til type data, dataformater, men også hvordan noen har valgt å lagre/distribuere data. Det kan være vanskelig å skille mellom disse og man kan noen ganger lure på om det er hos R begrensningene ligger. Det kan være flere av disse, men som hovedregel er problemet at data ofte ikke er distribuert i et universelt format. Permanent lagring og distribusjon av data er krevende, men ikke temaet her. Uansett: du vil ofte få data i et format som ikke er tilrettelagt verken i eller for R. Å gjøre om data fra et format til et annet kan være en avgjørende oppgave for å få gjort noe som helst. \n\nDette kan være krøkete og du har vikelig muligheten til å kløne det til skikkelig. For at du skal slippe det gir dette kapittelet en oppskrift for å håndtere slike data slik at du kan jobbe videre med dem i R på en hensiktsmessig måte. \n\nDet er også noen utfordringer i R for håndtering av factor-variable med lange (noen ganger veldig lange) 'labler'. Det gis noen løsninger på det også som gjør kodingen håndterbar. \n\n\n## Noen dataformater typisk for norske surveydata \n\nI Norge er Sikt (tidliger NSD) en stor leverandør av data til samfunnsvitenskapen. De leverer ofte data i proprietære formater som SAS, SPSS eller Stata. I tillegg vil de levere en *flat fil* som typisk er *comma separated variables* (csv). I de førstnevnte vil metadata være integrert, mens i csv er det bare kodene og metadata må slås opp i dokumentasjonen. \n\n\n\n\n## Suveydata med innebygd metadata\nEn type data som er mye brukt i samfunnsvitenskapen er surveydata, altså: data innhentet ved hjelp av spørreskjema. Slike data inneholder gjerne en god del kategoriske data eller man svarer på en likert-skala (f.eks. skala fra 1 til 5), men også kontinuerlige variable og kan også være tekstsvar. \n\nSlike data er ofte *kodet* slik at bestemte verdier har en tekstlig betydning. F.eks. 1 = \"gift\" og 2 = \"ugift\", eller 1 = \"veldig fornøyd\" og 5 = \"veldig misfornøyd\" osv. \n\nI R vil slike variable normalt håndteres som såkalte faktor-variable, men ofte vil surveydata inneholde relativt lange tekstverdier som gjør det tungvint. Men det finnes løsninger. For å gjøre en lang historie kort: Surveydata er best å håndtere med pakkene {labelled}. For videre analyser er det derimot vanligvis best å ha faktor-variable, så vi vil oftest konvertere dataene etterpå. Det høres tungvindt ut, men konverteringen er bare et par linjer kode. \n\nEt spesielt problem er at i Stata og SPSS vil mange datasett inneholde spesielle verdier som skal tolkes som *manglende data*, såkalt 'missing'. Det kan altså være egne koder for om respondenten ikke fikk stilt spørsmålet, ikke ville svare, eller andre grunner. For en variabel for inntekt kan f.eks. verdien 999999 betyr at vedkommende ikke ville svare. Når vi regner et gjennomsnitt er det da viktig at akkurat disse verdiene ikke inngår i beregningen. (Å kode på denne måten kan si er en uting uansett software, så vi skal i hvert fall kvitte oss med disse). \n\nI R er det flere pakker og funksjoner som er spesielt egnet til å håndtere slike data og vi skal bruke følgende: \n\n```{r }\n#| message: false \n#| warning: false\nlibrary(haven)       # For å lese inn data fra SPSS, Stata eller SAS\nlibrary(labelled)    # For å håndtere variable og verdier som inneholder 'labler'\n```\n\nI tillegg skal vi bruke pakker for generell datahåndtering som er samlet i pakken {tidyverse}, deriblant en pakke {forcats} for håndtering av kategoriske variable. \n```{r}\n#| message: false \n#| warning: false\nlibrary(tidyverse)   # Generelle funksjoner for datahåndtering\n```\n\n\nI det følgende skal vi dekke disse temaene: \n\n* Hvordan lese inn data fra Stata-formatet\n* Hvordan få oversikt over datasettet\n* Hvordan omkode variable med 'labler' \n* Hvordan håndtere verdier som er kodet som 'missing' i Stata-formatet (kalles user-defined-NA i R) \n* Hvordan gjøre om labelled-variable til faktor-variable \n* Hvordan gjør det ovenstående på veldig mange variable på en gang (altså: fremfor en og en, så du kan bruke tiden din på morsommere ting)\n\n\n\n## Lese inn data i Stata-formatet .dta \nI det følgende bruker jeg som eksempel dataene NorLag som man kan få tilgang til via NSD/Sikt her: https://norlag.nsd.no/. Disse dataene kan lastes ned i flere ulike typer formater slik data fra NSD/Sikt gjerne kan. Tilsvarende vil altså gjelde for andre datasett derfra. De ulike dataformatene er typisk tilpasset spesifikke software og det er en utfordring hvis man bruker et annet system enn det NSD har sett for seg. \n\nDe leverer også data i csv-format som ikke er uavhengig av software og kan leses inn av alle typer statistikksoftware. Generelt er csv-formatet å foretrekke når man skal dele data nettopp av denne grunn. Det er også et format som ikke er sårbar for endringer i softwaren over lengre tid slik at det må konverteres mellom formatversjoner. Særlig for surveydata er derimot csv-formatet ikke alltid så godt i praksis da det krever en godt opplegg for dokumentasjon og metadata som trengs i kodingen av data. NSD/Sikt har valgt en måte å dokumentere metadata på som ikke er lett håndterbart maskinelt av ikke-profesjonelle programmerere. Dette gjør csv-formatet lite egnet i dette tilfellet. \n\nDerimot kan man laste ned dataene i formatene til SPSS eller Stata. Vi vil her forholde oss kun til Stata-filer, men det vil være tilsvarende med SPSS og i praksis også SAS. Stata-formatet har en filhale som slutter på '.dta'. Fordelen med dette formatet er at metadata er innebygd i selve dataformatet. Altså, at en kategorisk variabel vil inneholde *både* en tallkode og en tekst med informasjon om hva tallet betyr. Dette er imidlertid en måte å håndtere data på som ikke er optimal for R. \n\nI det følgende skal vi dekke \n* Lese inn Stata-filer \n* Søke etter variable \n* Undersøke hvordan variable er kodet, se på 'lablene'\n* Gjøre omkodinger av variablene\n* Endre variable til faktor-variable \n* Omkode faktor-variable med veldig lange tekstverdier \n\n\n### Innlesning med {haven}\nFormatene Stata, SPSS og SAS er proprietære og man trenger i utgangspunktet disse softwarene for å åpne datafilene (og betale dyr lisens). For å lese inn i R kan man bruke pakken {haven} som inneholder spesialiserte funksjoner for å lese inn disse formatene. Funskjonen **read_stata()** leser inn dataene på en måte som bevarer særegenhetene fra Stata-formatet. \n\n\n\n```{r}\n#| message: false \n#| warning: false\nnorlag <- read_stata(\"data/norlag_panel2022.dta\") \n\n```\n\n\n\n## Få oversikt over dataene \nVi har nå et datasett i minnet og vi bør ta en titt på det. Nå er det mange hundre variable i datasettet, så det er lite hensiktsmessig å printe det til konsollen fordi det er rett og slett ikke plass. I tidligere kurs skal dere ha lært å bruke funksjonen *glimpse()*, men også her blir det mest rotete fordi det er så mange variable. \n\nEn enkel løsning er å bare se på noen få variable om gangen. Med klammeparentes kan vi angi hvilke radnummer og kolonnenummer vi ønsker se på med følgende syntax: **datasett[rader, kolonner]** der altså komma skiller mellom rader og kolonner. Følgende eksempel viser hvordan man kan bruke *head()* for å vise de første observasjonene i datasettet med bare de første 5 variablene (altså: kollonne nr 1-5). \n\n```{r}\n#| message: false \n#| warning: false\nhead(norlag[, 1:5])\n\n```\n\nLegg merke til at under hvert variabelnavn står det en liten tekst, f.eks. <dbl> eller <S3: haven_labelled>. Det kan også stå andre ting. dbl betyr at det er en kontinuerlig variabel, mens haven_labelled betyr at det er labler til alle eller noe verdier i variabelen. \n\nEn tilsvarende variant er å bruke *glimpse()* bare på et utvalg variable på tilsvarende måte. Her er et eksempel, men der vi ser på de 10 første variablene. \n\n```{r}\n#| message: false \n#| warning: false\nglimpse(norlag[, 1:20])\n\n```\n\n\nI denne output'en er den første kollonnen altså variabelnavnene, deretter er det en kollonne som viser hva slags type variabel det er, og deretter de første observasjonene på hver variabel slik at man får et inntrykk av hvordan det ser ut. *glimpse()* gir altså omtrent samme informasjon som *head()*, men er nok mer hensiktsmessig hvis mange variable. \n\n\nFor å se nærmere på en variabel går an å bruke funksjonen *look_for()*, som primært er en søke-funksjon, men det gir også informasjon om variabelen.\n\n\n```{r}\n#| message: false \n#| warning: false\nlook_for(norlag, \"iokjonn\")\n\n```\nI output fremgår det at dette er den 10'ende variabelen, inneholder informasjonen \"IOs kjønn\", er av typen numerisk med tilhørende labler, og verdiene er 1 = Mann og 2 = Kvinne. \n\n\nDet går også an å bare få ut variabel-label med funksjonen **var_label()** slik: \n\n```{r}\n#| message: false \n#| warning: false\nvar_label(norlag$iokjonn)\n\n```\n\nFor å se labels på *verdiene* bruk **val_labels()**.\n```{r}\n#| message: false \n#| warning: false\nval_labels(norlag$iokjonn)\n\n```\n\n\n### Alternativ: pakken {memisc} og *codebook()*\nMan vil klare seg greit med det vi har vist ovenfor. Men det finnes flere måter å gjøre det på. Pakken {memisc} inneholder en rekke funksjoner for å håndtere surveydata, som vi ikke skal gå nærmere inn på her. Men akkurat funksjonen *codebook()* gir litt mer informativt output enn *look_for()*. \n\nFor å bruke denne må du installere pakken først. I eksempelet nedenfor er pakken ikke lastet med library(), men angitt pakken direkte med memisc:: først. Dette kan være nyttig hvis man ikke skal bruke noen andre funksjoner fra denne pakken.\n\n```{r}\n#| message: false \n#| warning: false\nmemisc::codebook(norlag$iokjonn)\n\n```\n\nPoenget her er altså bare å få en penere output og litt deskriptiv statistikk samtidig. \n\n\n\n## Søke i datasettet etter variable\nAlle datasett skal komme med en dokumentasjon som sier hva hver variabel inneholder og hvilke verdier som finnes i hver variable, og hva de betyr. Dette leveres gjerne som en separat fil, ganske ofte i pdf eller html format. NSD/Sikt leverer dokumentasjonen for Norlag i html-format. (Ideelt burde det vært i et enkelt maskinlesbart format egnet til å bruke til omkoding og labler for de som ønsker det, men de har valgt en annen løsning). \n\nDu kan søke i dokumentasjonen på samme måte som i andre filer, men det kan være litt knotete. Et godt alternativ er å søke direkte i datasettet. Funksjonen **look_for()** søker både i variabelnavn, verdier og labler. Her er et eksempel for hvordan finne variabler som inneholder ordet \"yrkesinntekt\". Du kan også søke på kortere eller lengre tekststrenger. (Søker du f.eks. bare på \"innt\" eller \"yrke\" så får du opp langt flere variable, så du må kanskje prøve deg litt frem).\n\n```{r}\n#| message: false \n#| warning: false\nlook_for(norlag, \"Yrkesinntekt\")\n```\n\nDet er to variable som inneholder teksten \"yrkesinntekt\". Den første variabelen har posisjon 353 i datasettet og har variabelnavnet inwyrkinnt.  Den andre variabelen har posisjon 371 og har navnet inpartwyrkinnt. Vi fokuserer på den første.\n\nMerk at når labelen avsluttes med ~ (uttales \"tilde\") indikerer det at teksten er avkortet i outputvinduet. Du får opp hele teksten ved å bruke *val_label()* slik: \n\n```{r}\n#| message: false \n#| warning: false\nvar_label(norlag$inwyrkinnt)\n```\n\n\n\n\n\n## Omkode variable som er labelled  \nNoen ganger vil vi omkode en variabel. Et eksempel er variabelen he104. Her er innholdet i den variabelen. \n\n```{r}\n#| message: false \n#| warning: false\nmemisc::codebook(norlag$he104)\n\n```\n\nLegg merke til at de tre nederste verdiene egentlig er varianter av å mangle data. Disse verdiene skal normalt ikke være med i en videre analyse, men er \"missing\". Vi bør fortelle R at disse verdiene ikke skal tas med videre ved å omkode til NA. \n\nFølgende kode gjør en omkoding til NA. I eksempelet har jeg lagt inn linjeskift for mutate() for å tydeliggjøre de ulike delene. \n\n* Første linje lager en ny variabel he104b som skal inne en kopi av he104. Funksjonen *replace()* tar så utgangspunkt i variabelen he104, og de verdiene som ikke er angitt at skal byttes ut vil beholdes fra denne.  \n* Andre linje sier at hvis variabelen he104 er en av verdiene 999, 99999, eller 999999, så... \n* sier tredje linje at da skal de få verdien NA i stedet. \n\n\n```{r}\n#| message: false \n#| warning: false\nnorlag %>% \n  mutate(he104b = replace(he104, \n                         he104 %in% c(999, 99999, 999999), \n                         NA)) %>%  \n    select(he104b) %>% \n  memisc::codebook()\n\n```\n\nLegg merke til at output nå har de omtalte verdiene 0 observasjoner, men lablene finnes i variabelen likevel! Lablene eksisterer altså uavhengig av verdiene i variabelen, men det har kommet en linje til med verdien NA. Det er det det ble omkodet til. \nNå trenger vi jo ikke de lablene vi omkodet, så de kan fjernes helt. Funksjoen *drop_unused_value_labels()* gjør akkurat det det høres ut som. Her er et eksempel: \n\n```{r}\n#| message: false \n#| warning: false\nnorlag %>% \n  select(he104) %>% \n  mutate(he104 = replace(he104, \n                         he104 %in% c(999, 99999, 999999), \n                         NA)) %>%  \n  drop_unused_value_labels() %>% \n  memisc::codebook()\n```\n\n\n\n### Alternativ: legg til user-specified-na\nEn alternativ fremgangsmåte er mer slik man ville gjort i annen software ved at man definerer disse verdiene som \"missing\", dvs NA. Funksjonen *set_na_values()* definerer hvilke verdier som skal regnes som NA, men uten å endre lablene eller kode om på annen måte. \n\n\n```{r}\n#| message: false \n#| warning: false\nnorlag %>% \n  select(he104) %>% \n  set_na_values(he104 = c(999, 99999, 999999) ) %>% \n  memisc::codebook()\n```\n\nI output står det nå en \"M\" mellom verdien og labelen, som angir at dette er \"Missing\". I frekvenstabellen er det nå i prosentueringen skilt mellom *Valid* og *Total*, der missing altså ikke er regnet med blant gyldige verdier. \n\nMen det er ryddigst å fjerne disse missing-verdiene og sette de til NA. Funksjonen *zap_na()* gjør disse verdiene om til NA, altså omkoder alle missingverdiene til NA. Som i forrige variant vil da lablene fremdeles eksistere, men disse kan fjernes på samme måte med *drop_unused_value_labels()*.  \n\n```{r}\n#| message: false \n#| warning: false\nnorlag %>% \n  select(he104) %>% \n  set_na_values(he104 = c(999, 99999, 999999) ) %>% \n  zap_missing() %>% \n  drop_unused_value_labels() %>% \n  memisc::codebook()\n```\n\n\n\n## Omkoding av andre verdier\nVi starter med å lagre de endringene som ble testet ut over, og lagrer disse i et nytt datasett som kalles *norlag2* som vi bruker videre i eksemplene. \n\n```{r}\n#| message: false \n#| warning: false\nnorlag2 <- norlag %>% \n  select(he104) %>% \n  mutate(he104 = replace(he104, \n                         he104 %in% c(999, 99999, 999999), \n                         NA)) %>%  \n  drop_unused_value_labels() \n```\n\nLa oss si at vi det er mindre viktig om man har det romslig eller veldig romslig. Det er heller ikke så viktig å skille mellom de som 'problemer' og de som har det 'svært vanskelig'. Da ønsker vi å slå sammen disse kategoriene. \n\nFor å omkode en variabel som har labler kan vi bruke **recode()**. Det gjør vi typisk innenfor en mutate-setning. \n\n* Første linje sier at det skal lages en ny variabel, som er en rekodet variant av he104\n* Andre linje sier at alle med verdien 1 skal gjøres om til verdien 2\n* Tredje linje sier at alle med verdien 5 skal gjøres om til verdien 4\n\nLegg merke til at den opprinneligve verdien angis innenfor apostrof `1`, mens den nye verdien ikke skal angis med apostrof. \n\n```{r}\n#| message: false \n#| warning: false\nnorlag2 %>% \n  mutate(okonomi = recode(he104, \n                          `1` = 2 ,\n                          `5` = 4) ) %>% \n  select(okonomi) %>% \n  memisc::codebook()\n```\n\nLegg merke til at de opprinnelge lablene fremdeles er der, men to av kategoriene har nå null observasjoner. Det innebærer jo også at lablene er litt misvisende, for det er jo egentlig kombinasjoner. \n\nÅ omkode lablene kan også gjøres. Funksjonen *add_value_labels()* angir hvilken variabel lablene skal angis for, og så settes ny label og hvilken verdi det tilsvarer. Lablene for verdier som ikke er nevnt blir beholdt slik de er. \n\n```{r}\n#| message: false \n#| warning: false\nnorlag2 %>% \n  mutate(he104 = recode(he104, \n                          `1` = 2 ,\n                          `5` = 4,\n                        .combine_value_labels = TRUE) ) %>% \n  select(he104) %>% \n  add_value_labels(he104 = c(\"Romslig/veldig romslig\" = 2, \n                             \"Problemer/store problemer\" = 4)) %>% \n  memisc::codebook()\n```\n\n\n\n## Konverter variable til et mer ordinært R-format \n\nVi starter med å lagre en kopi av datasettet med endrede labler. \n\n```{r}\n#| message: false \n#| warning: false\nnorlag3 <- norlag2 %>% \n  mutate(he104 = recode(he104, \n                          `1` = 2 ,\n                          `5` = 4,\n                        .combine_value_labels = TRUE) ) %>% \n  add_value_labels(he104 = c(\"Romslig/veldig romslig\" = 2, \n                             \"Problemer/store problemer\" = 4))\n```\n\n\nMen hva skjer når vi skal lage en fin tabell? Vi prøver med {gtsummary} og *tbl_summary()*. \n\n```{r}\n#| message: false \n#| warning: false\nlibrary(gtsummary)\nnorlag3 %>% \n  tbl_summary(include = he104)\n```\n\nTabellen vises altså uten lablene! Noe av poenget med å ha labler var jo å at det skal syens... Siden mange funksjoner i R i utgangspunktet ikke er laget for labler er det rett og slett ikke støttet.  \n\nMen vi kan gjøre om variabelen med *as_factor()*. Gjør om lablene til faktor-nivåer og så lage en tabell med den endrede variabelen. \n(OBS! funskjonen *as.factor()* gjør bare nesten det samme. *as_factor()* er laget bl.a. for å håndtere labler, mens *as.factor()* ikke gjør det).\n\n```{r}\n#| message: false \n#| warning: false\nnorlag3 %>% \n  mutate(he104 = as_factor(he104)) %>% \n  gtsummary::tbl_summary(include = he104)\n```\n\n\n\n\n\n## Hvordan gjøre alt i en fei: alle variable samtidig \n\n\nFor NorLAG er det noen missingverdier som er definert på tvers av hele datasettet. Se dokumentasjon her: https://norlag.nsd.no/filterverdier \nÅ gjøre de operasjonene vi gjorde over for hver enkelt av de over 400 variablene er utrolig arbeidskrevende og drit kjedelig. Så det gidder vi ikke. Men å omkode alle variable i et helt datasett krever litt mer avanserte operasjoner. Her bruker vi *across()* som angir at vi skal gjøre samme operasjon på de nærere angitte variablene. Vi kan enten gi en liste med variabelnavn, eller sette et krav om at variablene skal være av en viss type, starte med visse bokstaver eller tegn osv. I eksempelet nedenfor angir vi bare at variabelene skal være av typen 'labelled', noe de aller fleste er. Missing-verdiene i datasettet er jo felles for alle variable, så da kan vi bruke replace() og sette disse til NA. Her er et eksempel:\n\n\n```{r}\n#| message: false \n#| warning: false\nnorlag4 <- norlag %>% \n  mutate(across( where(is.labelled) ,  ~replace(., \n                                        . %in% c(997, 998, 999, 99999, 999999), \n                                        NA))) %>%  \n  drop_unused_value_labels()                                           \n```\n\nI mutate-setningen skjer følgende: \n\n* across() sier at vi skal gjøre det samme for flere variable, spesifisert med *where(is.labelled)*. \n* for disse skal vi bruke replace(), angitt ved ~replace()\n* inni parentesen angis . som hver av de variablene som er plukket ut i across(). Så for disse variablene skal det byttes ut verdier\n* neste linje starter med ., som igjen henviser til de samme variablen, og hvis de har en av de opplistede verdiene\n* i så fall får de ny verdi NA\n\n\nDermed er samtlige labelled-variable omkodet på denne måten i en fei. \n\nDa kan vi lage en tabell på nytt. Her får vi samme problem med at lablene ikke synes, men missing-verdiene er i hvetr fall ryddet opp i.\n\n```{r}\n#| message: false \n#| warning: false\nnorlag4 %>% \n  gtsummary::tbl_summary(include = he104)\n```\n\n\nVi kan selvfølgelig endre til factor som gjort over, men da får vi igjen et problem med å gjøre det en variabel om gangen. Igjen: det gidder vi ikke. I stedet bruker vi en enkel funksjon som fikser biffen for hele datasettet, nemlig *unlabelled()*.  \n\n\n```{r}\n#| message: false \n#| warning: false\nnorlag4 %>% \n  unlabelled() %>% \n  gtsummary::tbl_summary(include = he104)\n```\n\nOBS! Unlabelled endrer alle labelled-variablene. Det er ikke sikkert at vi vil det. Spesielt gjelder det at det kan være andre labler knyttet til variable som skal være kontinuerlige. Men: hvis man har gjort en god opprydning i datasetet i forkant, med de omkodinger som trengs (det må nok gjøres en for en variabel), så er dette ganske greit. \n\n\n### Sett det hele sammen: fiks hele skiten i en fei\nHvert steg ovenfor blir ganske omstendelig, og det ser vanskeligere ut enn det er. Her er en kode som setter det hele sammen i ett steg. \n\n\n```{r}\n#| message: false \n#| warning: false\nnorlag <- read_stata(\"data/norlag_panel2022.dta\") %>% \n    mutate(across( where(is.labelled) ,  ~replace(., \n                                        . %in% c(997, 998, 999, 99999, 999999), \n                                        NA))) %>%\n    # Her kan ymse omkodinger av labeelled data gjøres: \n    mutate(he104 = recode(he104, \n                          `1` = 2 ,\n                          `5` = 4,\n                        .combine_value_labels = TRUE) ) %>% \n      # Her kan endrer du lablene hvis det trengs for de samme variablene: \n  add_value_labels(he104 = c(\"Romslig/veldig romslig\" = 2, \n                             \"Problemer/store problemer\" = 4)) %>% \n  # For hele datasettet fjernes ikke-brukte labler \n  drop_unused_value_labels() %>% \n  # Så gjør alle variable om til mer ordinære R-format. Dvs. gjøres labler om til factor\n  unlabelled()\n\n```\n\n\nSå kan du gjøre andre analyser etter dette. Hvis du trenger å gå tilbake for å omkode flere labelled-variable, så legges dette til i mutate-setningen over. Det er lurt å gjøre all den typen omkoding ett sted, slik at du får et datasett som er ferdig ryddet og klart til andre analyser. \n\n\n\n\n## Omkoding av factor-variable \nNoen ganger har man et datasett som allerede er omgjort med factor-variable. Eller du har en eller annen grunn til å ikke gå tilbake til et tidligere steg for å omkode. Men du har factor-levels med skikkelig lang tekst kan det være noe drit å kode om. Kan man gjøre dette på en lurere måte? Minst mulig tårer? Ja, selvsagt. \n\nI NorLAG er variabelen wr117zz svar på et spørsmål om \"Mulighet for å redusert arbeidstid (deltid)\". Når denne variabelen er gjort om til factor kan man se hvilke verdier variabelen har med bruke av funksjonen *levels()* slik: \n\n```{r}\n#| message: false \n#| warning: false\nlevels(norlag$wr117zz)\n\ntable(norlag$wr117zz)\n\n```\n\nLa oss si at vi vil kode om slik at vi får en variabel som bare er om vedkommende har mulighet til å jobbe deltid eller ikke. De som allerede jobber deltid har jo åpenbart mulighet til det, så de skal kodes om til \"Ja\". De andre kategoriene er egentlig grunner til at det mangler data, så de skal settes til NA. En mulighet er da å omkode som følger: \n\n```{r}\n#| message: false \n#| warning: false\nnorlag_omkodet <- norlag %>%\n  mutate(redarbtid = replace(wr117zz, wr117zz == \"filter: jobber deltid\", \"Ja\"), \n         redarbtid = replace(redarbtid, redarbtid == \"filter: selvstendig næringsdrivende (NorLAG3 inkl frilanser/annet)\", NA), \n         redarbtid = replace(redarbtid, redarbtid == \"filter: ikke i arbeid\", NA), \n         redarbtid = replace(redarbtid, redarbtid == \"vil ikke svare\", NA),\n         redarbtid = replace(redarbtid, redarbtid == \"vet ikke\", NA),\n         redarbtid = replace(redarbtid, redarbtid == \"mangler data\", NA),\n         redarbtid = replace(redarbtid, redarbtid == \"Deltok ikke i runden\", NA)) %>% \n  droplevels()\n\n```\n\nDette funker, men blir ganske mye tekst å skrive, og da kan man også lett gjøre skrivefeil. Husk at faktornivåene må angis helt nøyaktig slik de er skrevet! \nMerk at den siste funksjone, *droplevels()*, bare fjerner faktor-levels som ikke er i bruk. \n\nI output for faktor-levels angir klammeparentesen gir rekkefølgen på disse verdiene. Vi kan bruke denne informasjonen direkte i omkodingen for å unngå å skrive så veldig mye. Når man bruker levels() får man en liten vektor med verdier, og disse kan man altså henvise til med rekkefølgen. Her er et eksempel for bare å bytte ut de som jobber deltid til \"Ja\": \n\n\n```{r}\n#| message: false \n#| warning: false\nnorlag_omkodet <- norlag %>%\n  mutate(redarbtid = replace(wr117zz, wr117zz == levels(wr117zz)[3], \"Ja\")) %>% \n  droplevels()\n\n\n```\n\nTrikset her er altså å bruke levels() og vise til hvilket nummer i rekkefølgen. Da unngår vi også faren for skrivefeil.  \n\nVi vil også kode om alle de andre verdiene, nummer 4-9 til NA. Det kan vi gjøre på samme måte, men vi behøver ikke skrive en ny linje for hver verdi. Den logiske operatoren == kan man bruke når man skal sjekke om to verdier er like. Hvis vi skal se om en verdi er lik en av flere mulige kan vi bruke %in% og så en liste med verdier. levels() gir en liste med verdier, så da kan vi angi den direkte og alle verdiene 4 til 9 ved å skrive 4:9. Samlet blir det da slik: \n\n```{r}\n#| message: false \n#| warning: false\nnorlag_omkodet <- norlag %>%\n  mutate(redarbtid = replace(wr117zz, wr117zz == levels(wr117zz)[3], \"Ja\"), \n         redarbtid = replace(redarbtid, redarbtid %in% levels(wr117zz)[4:9], NA)) %>% \n  droplevels()\n\nmemisc::codebook(norlag_omkodet$redarbtid)\n\n```\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"surveyData.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.280","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}}}